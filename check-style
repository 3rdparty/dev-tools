#!/bin/bash

# Unset variable would be a sign of programmer error. We are not using '-e' in
# this script as we'd like to handle these cases ourselves where relevant, i.e.,
# allow more than one code check failure per run.
set -u

# Work from the git root. This is important to help some tools pick up the
# correct configuration.
git_root=$(git rev-parse --show-toplevel)
cd "${git_root}"

# Get all files under version control.
affected_files=$(git ls-tree --full-tree --name-only -r HEAD)

# Cummulative status code for the script. Updated through 'run_check' when
# running checks. A status code creater than 0 will indicate that one or more
# checks failed.
status_code=0

# Run a code check command and update the cummulative error code.
run_check() {
    local program=$1
    if [ ! -f "$(which "${program}" 2>/dev/null)" ]; then
        # If the command can not be found, we don't treat this as an error, but
        # instead we emit a warning.
        echo "WARNING: Can not run check: ${program} not found" 1>&2
        return;
    fi

    # Run check from arguments and update status code.
    $@
    status_code=$(($status_code + $?))
}

# Helper function to filter affected files by extension.
get_files_by_extension() {
    filter=""
    for ext in $@; do
        filter="\\.$(echo $ext | sed -e 's|^\.||')$|${filter}"
    done
    filter=$(echo $filter | sed -e 's/|$//')

    echo $affected_files | tr ' ' '\n' | egrep $filter
}

# Check files that we can clang-format.
clang_format_files=$(get_files_by_extension .cc .cpp .h .hpp .proto)
if [ ! -z "${clang_format_files}" ]; then
    # Run clang-format.
    run_check clang-format --dry-run -Werror --ferror-limit=0 $clang_format_files

    # Run our homebrewed line length checker.
    run_check "$(cd -- "$(dirname "$0")" >/dev/null 2>&1 && pwd -P)/check-line-length" $clang_format_files
fi

# Check python files
python_files=$(get_files_by_extension .py)
if [ ! -z "${python_files}" ]; then
    # Run yapf.
    run_check yapf -d -p ${python_files}

    # Run mypy.
    run_check mypy --cache-dir=/tmp/ --no-error-summary ${mypy_args-""} ${python_files}

    # Run isort
    run_check isort --check --diff ${python_files}
fi

# Check files that we can check with prettier.
# Turns out it is all of them.
if [ ! -z "${affected_files}" ]; then
    # Run prettier.
    run_check prettier --ignore-unknown --check ${affected_files}
fi

exit $status_code
